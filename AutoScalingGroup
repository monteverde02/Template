{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Autoscaling group, using build pipeline with tags in dev",
  "Parameters": {
    "InstanceType": {
      "Description": "EC2 instance type for Jenkins Server",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t1.micro",
        "t2.micro"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to EC2 instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
      "Default": "OR-AWS"
    },
    "CodePipelineDeploymentGroupName": {
      "Description": "The target environment prefix name",
      "Type": "String",
      "ConstraintDescription": "Enter the code pipeline that this set is expected to attach..",
      "Default": "Dev",
      "AllowedValues": [
        "Dev",
        "Production"
      ]
    },
    "NotificationEmail": {
      "Description": "Email where to send all alerts.",
      "Type": "String",
      "ConstraintDescription": "Enter your mail address.",
      "Default": "monteverde02@hotmail.com"
    },
    "EnableCloudWatch": {
      "Description": "Enable Cloud Watch?",
      "Type": "String",
      "ConstraintDescription": "If set to true cloudwach would be enabled and 1 minute logging would apply",
      "Default": false,
      "AllowedValues": [
        true,
        false
      ]
    },
    "WebServersUsePulicIp": {
      "Description": "Get public ip for web servers on DMZ",
      "Type": "String",
      "ConstraintDescription": "When enabled, you will be able to connect directly to the webservers without using the NLB",
      "Default": false,
      "AllowedValues": [
        true,
        false
      ]
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t1.micro": {
        "Arch": "PV64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "PV64": "ami-1ccae774",
        "HVM64": "ami-1ecae776"
      },
      "us-west-2": {
        "PV64": "ami-ff527ecf",
        "HVM64": "ami-e7527ed7"
      },
      "us-west-1": {
        "PV64": "ami-d514f291",
        "HVM64": "ami-d114f295"
      },
      "eu-west-1": {
        "PV64": "ami-bf0897c8",
        "HVM64": "ami-a10897d6"
      },
      "eu-central-1": {
        "PV64": "ami-ac221fb1",
        "HVM64": "ami-a8221fb5"
      },
      "ap-northeast-1": {
        "PV64": "ami-acd9e8fe",
        "HVM64": "ami-68d8e93a"
      },
      "ap-southeast-1": {
        "PV64": "ami-27f90e27",
        "HVM64": "ami-cbf90ecb"
      },
      "ap-southeast-2": {
        "PV64": "ami-ff9cecc5",
        "HVM64": "ami-fd9cecc7"
      },
      "sa-east-1": {
        "PV64": "ami-fd9925e0",
        "HVM64": "ami-b52890a8"
      }
    }
  },
  "Resources": {
    "VPCWeb": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.10.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "VPCWeb",
                  {
                    "Ref": "CodePipelineDeploymentGroupName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCWeb"
                  },
                  {
                    "Ref": "CodePipelineDeploymentGroupName"
                  },
                  "IGW"
                ]
              ]
            }
          }
        ]
      },
        "DependsOn": [
          "VPCWeb"
        ]      
    },
    "AttachVpnGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPCWeb"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      },
      "DependsOn": [
        "InternetGateway"
      ]
    },
    "GatewayRouteInternet": {
      "Type": "AWS::EC2::Route",
      "DependsOn": [
        "InternetGateway",
        "AttachVpnGateway",
        "RoutingTable"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "RoutingTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RoutingTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPCWeb"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCWeb"
                  },
                  {
                    "Ref": "CodePipelineDeploymentGroupName"
                  },
                  "RoutingTable"
                ]
              ]
            }
          }
        ]
      }
    },
    "DMZSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "HTTP from the world inboud",
        "VpcId": {
          "Ref": "VPCWeb"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCWeb"
                  },
                  {
                    "Ref": "CodePipelineDeploymentGroupName"
                  },
                  "DMZ",
                  "SG"
                ]
              ]
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "WebServersSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "HTTP from the world inboud",
        "VpcId": {
          "Ref": "VPCWeb"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCWeb"
                  },
                  {
                    "Ref": "CodePipelineDeploymentGroupName"
                  },
                  "WebSrv",
                  "SG"
                ]
              ]
            }
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupId": {
              "Ref": "DMZSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "BastionHostSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "SourceSecurityGroupId": {
              "Ref": "BastionHostSecurityGroup"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "8",
            "ToPort": "-1",
            "SourceSecurityGroupId": {
              "Ref": "BastionHostSecurityGroup"
            }
          }
        ]
      },
      "DependsOn": [
        "VPCWeb",
        "BastionHostSecurityGroup"
      ]
    },
    "PrivateSubnetSecurityGroup": {
      "DependsOn": [
        "VPCWeb"
      ],
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Rule to block all inbound traffic from the net",
        "VpcId": {
          "Ref": "VPCWeb"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCWeb"
                  },
                  {
                    "Ref": "CodePipelineDeploymentGroupName"
                  },
                  "Private",
                  "SG"
                ]
              ]
            }
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3306",
            "ToPort": "3306",
            "SourceSecurityGroupId": {
              "Ref": "DMZSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3306",
            "ToPort": "3306",
            "SourceSecurityGroupId": {
              "Ref": "BastionHostSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "BastionHostSecurityGroup"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "SourceSecurityGroupId": {
              "Ref": "BastionHostSecurityGroup"
            }
          },
          {
            "IpProtocol": "icmp",
            "FromPort": "8",
            "ToPort": "-1",
            "SourceSecurityGroupId": {
              "Ref": "BastionHostSecurityGroup"
            }
          }
        ]
      }
    },
    "BastionHostSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "RDP connection to Bastion Host",
        "VpcId": {
          "Ref": "VPCWeb"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCWeb"
                  },
                  {
                    "Ref": "CodePipelineDeploymentGroupName"
                  },
                  "Bastion",
                  "SG"
                ]
              ]
            }
          }
        ],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "CidrIp": "64.180.21.78/32"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "64.180.21.78/32"
          }
        ]
      },
      "DependsOn": [
        "VPCWeb"
      ]
    },
    "DMZSubnet01": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2c",
        "CidrBlock": "10.10.3.0/24",
        "MapPublicIpOnLaunch": "true",
        "VpcId": {
          "Ref": "VPCWeb"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCWeb"
                  },
                  {
                    "Ref": "CodePipelineDeploymentGroupName"
                  },
                  "DMZ",
                  "10.10.3.0"
                ]
              ]
            }
          }
        ]
      },
      "DependsOn": [
        "VPCWeb"
      ]
    },
    "DMZSubnet01Association": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "DMZSubnet01"
        },
        "RouteTableId": {
          "Ref": "RoutingTable"
        }
      },
      "DependsOn": [
        "DMZSubnet01"
      ]
    },
    "BastionHostSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2a",
        "CidrBlock": "10.10.4.0/24",
        "MapPublicIpOnLaunch": "true",
        "VpcId": {
          "Ref": "VPCWeb"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCWeb"
                  },
                  {
                    "Ref": "CodePipelineDeploymentGroupName"
                  },
                  "DMZ",
                  "10.10.4.0"
                ]
              ]
            }
          }
        ]
      },
      "DependsOn": [
        "VPCWeb"
      ]
    },
    "BastionHostSubnetAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "BastionHostSubnet"
        },
        "RouteTableId": {
          "Ref": "RoutingTable"
        }
      },
      "DependsOn": [
        "BastionHostSubnet"
      ]
    },
    "DMZSubnet02": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "us-west-2b",
        "CidrBlock": "10.10.2.0/24",
        "MapPublicIpOnLaunch": "true",
        "VpcId": {
          "Ref": "VPCWeb"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCWeb"
                  },
                  {
                    "Ref": "CodePipelineDeploymentGroupName"
                  },
                  "DMZ",
                  "10.10.2.0"
                ]
              ]
            }
          }
        ]
      },
      "DependsOn": [
        "VPCWeb"
      ]
    },
    "DMZSubnet02Association": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "DMZSubnet02"
        },
        "RouteTableId": {
          "Ref": "RoutingTable"
        }
      },
      "DependsOn": [
        "DMZSubnet02"
      ]
    },
    "EC2InstanceRoles": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonSSMFullAccess",
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
          "arn:aws:iam::313504169923:policy/CWPolicyAllowCloudWatchWrite",
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy"
        ],
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EC2InstanceRoles"
          }
        ]
      },
      "DependsOn": [
        "EC2InstanceRoles"
      ]
    },
    "RolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "root",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "*",
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "EC2InstanceRoles"
          }
        ]
      },
      "DependsOn": [
        "EC2InstanceRoles"
      ]
    },
    "WebServerLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": [
        "DMZSubnet01",
        "DMZSubnet01",
        "DMZSubnet01Association",
        "InternetGateway",
        "RoutingTable",
        "AttachVpnGateway",
        "EC2InstanceProfile"
      ],
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "AssociatePublicIpAddress": {
          "Ref": "WebServersUsePulicIp"
        },
        "InstanceMonitoring": {
          "Ref": "EnableCloudWatch"
        },
        "SecurityGroups": [
          {
            "Ref": "WebServersSecurityGroup"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "EC2InstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash \n",
                "yum install aws-cfn-bootstrap -y \n",
                "yum install aws-cli -y \n",
                "instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id) \n",
                "yum install httpd -y \n",
                "chkconfig --level 235 httpd on \n",
                "service httpd start \n",
                "cd /home/ec2-user/ \n",
                "aws s3 cp s3://aws-codedeploy-us-west-2/latest/codedeploy-agent.noarch.rpm . --region us-west-2 \n",
                "yum -y install codedeploy-agent.noarch.rpm \n",
                "yum install stress -y \n",
                "yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https -y \n",
                "curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip -O \n",
                "unzip CloudWatchMonitoringScripts-1.2.1.zip \n",
                "rm CloudWatchMonitoringScripts-1.2.1.zip -f \n",
                "cd /tmp \n",
                "curl https://amazon-ssm-us-west-2.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm \n",
                "yum install -y amazon-ssm-agent.rpm \n",
                "rm amazon-ssm-agent.rpm -f \n"
              ]
            ]
          }
        }
      }
    },
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "NotificationEmail"
            },
            "Protocol": "email"
          }
        ]
      }
    },
    "WebServerAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          "us-west-2b",
          "us-west-2c"
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "DMZSubnet01"
          },
          {
            "Ref": "DMZSubnet02"
          }
        ],
        "Tags": [
          {
            "Key": "WebApplicationVPC",
            "Value": "VPCWeb",
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCWeb"
                  },
                  {
                    "Ref": "CodePipelineDeploymentGroupName"
                  },
                  "Auto-Scaling-Group"
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "WebServerLaunchConfiguration"
        },
        "MinSize": "0",
        "MaxSize": "0",
        "HealthCheckGracePeriod": "1600",
        "HealthCheckType": "ELB",
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ],
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "NotificationTopic"
          },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupMinSize",
              "GroupMaxSize"
            ]
          }
        ],
        "TerminationPolicies": [
          "ClosestToNextInstanceHour"
        ]
      },
      "DependsOn": [
        "DMZSubnet02",
        "DMZSubnet01",
        "ElasticLoadBalancer",
        "WebServerLaunchConfiguration"
      ]
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerAutoScalingGroup"
        },
        "Cooldown": "360",
        "ScalingAdjustment": "1"
      },
      "DependsOn": [
        "WebServerAutoScalingGroup"
      ]
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "WebServerAutoScalingGroup"
        },
        "Cooldown": "360",
        "ScalingAdjustment": "-1"
      },
      "DependsOn": [
        "WebServerAutoScalingGroup"
      ]
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 4 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "1",
        "Threshold": "90",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerAutoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      },
      "DependsOn": [
        "WebServerAutoScalingGroup",
        "WebServerScaleUpPolicy"
      ]
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 40% for 20 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "4",
        "Threshold": "40",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "WebServerAutoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      },
      "DependsOn": [
        "WebServerAutoScalingGroup",
        "WebServerScaleDownPolicy"
      ]
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCWeb"
                  },
                  {
                    "Ref": "CodePipelineDeploymentGroupName"
                  },
                  "ELB"
                ]
              ]
            }
          }
        ],
        "Subnets": [
          {
            "Ref": "DMZSubnet01"
          },
          {
            "Ref": "DMZSubnet02"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "DMZSecurityGroup"
          }
        ],
        "CrossZone": "true",
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "2",
          "Interval": "6",
          "Timeout": "2"
        }
      }
    },
    "WebServersNetworkACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "VPCWeb"
                  },
                  {
                    "Ref": "CodePipelineDeploymentGroupName"
                  },
                  "ACL"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPCWeb"
        }
      }
    },
    "ACLOpenPort80Out": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebServersNetworkACL"
        },
        "RuleNumber": "1000",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "ACLOpenPort80In": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebServersNetworkACL"
        },
        "RuleNumber": "2000",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "ACLOpenPort22In": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebServersNetworkACL"
        },
        "RuleNumber": "3000",
        "Protocol": "6",
        "RuleAction": "allow",
        "PortRange": {
          "From": "22",
          "To": "22"
        },
        "Egress": "false",
        "CidrBlock": "10.10.0.0/16"
      }
    },
    "ACLOpenPort22Out": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebServersNetworkACL"
        },
        "RuleNumber": "4000",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "PortRange": {
          "From": "22",
          "To": "22"
        },
        "CidrBlock": "10.10.0.0/16"
      }
    },
    "ACLOpenPort3389In": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebServersNetworkACL"
        },
        "RuleNumber": "4000",
        "Protocol": "6",
        "RuleAction": "allow",
        "PortRange": {
          "From": "3389",
          "To": "3389"
        },
        "Egress": "false",
        "CidrBlock": "10.10.0.0/16"
      }
    },
    "ACLOpenPort3389Out": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebServersNetworkACL"
        },
        "RuleNumber": "5000",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "PortRange": {
          "From": "3389",
          "To": "3389"
        },
        "CidrBlock": "10.10.0.0/16"
      }
    },
    "ACLOpenPort53TCPIn": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebServersNetworkACL"
        },
        "RuleNumber": "6000",
        "Protocol": "6",
        "RuleAction": "allow",
        "PortRange": {
          "From": "53",
          "To": "53"
        },
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "ACLOpenPort53TPCOut": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebServersNetworkACL"
        },
        "RuleNumber": "7000",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "PortRange": {
          "From": "53",
          "To": "53"
        },
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "ACLOpenPort53UDPIn": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebServersNetworkACL"
        },
        "RuleNumber": "8000",
        "Protocol": "17",
        "RuleAction": "allow",
        "PortRange": {
          "From": "53",
          "To": "53"
        },
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "ACLOpenPort53UDPOut": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebServersNetworkACL"
        },
        "RuleNumber": "9000",
        "Protocol": "17",
        "RuleAction": "allow",
        "Egress": "true",
        "PortRange": {
          "From": "53",
          "To": "53"
        },
        "CidrBlock": "0.0.0.0/0"
      }
    }
  }
}